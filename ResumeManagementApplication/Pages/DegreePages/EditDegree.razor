@page "/editDegree/{DegreeId:int}"
<PageTitle>Edit Degree</PageTitle>

@inject IDegreeService degreeService
@inject NavigationManager NavigationManager

<h1>Edit Degree</h1>

@if(degree.Id == 0)
{
    <label for="id">Could not fetch id.</label>
}
else
{
    <form @onsubmit="@(async () => await SaveDegree())">
        <div class="form-group">
            <label for="id">Id:</label>
            <label>@degree.Id</label>
        </div>
        <div class="form-group">
            <label for="name">Name:</label>
            <input type="text" class="form-control" id="name" name="name" @bind="degree.Name" required>
        </div>
        <div class="form-group">
            <label for="creationDate">Creation Date:</label>
            <label>@degree.CreationTime</label>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </form>
}

@code {
    [Parameter]
    public int DegreeId { get; set; }

    private Degree degree = new();

    protected override async Task OnInitializedAsync()
    {
        var result = (await degreeService.GetByIdsAsync(new List<int>() { DegreeId })).FirstOrDefault();
        degree = result ?? new();
    }

    private async Task<bool> SaveDegree()
    {
        var isModelValid = await IsValid();
        if (!isModelValid)
        {
            await ShowMessageAsync("Operation failed.");
            return false;
        }

        var success = await degreeService.SaveAsync(degree);
        if (success)
        {
            NavigationManager.NavigateTo("/Degrees");
            return true;
        }
        else
        {
            await ShowMessageAsync("Operation failed.");
            return false;
        }
    }

    private async Task ShowMessageAsync(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }

    private async Task<bool> IsValid()
    {
        var validations = new List<Task<bool>>()
        {
            ValidateDegreeName()
        };

        var results = await Task.WhenAll(validations);
        return results.All(x => x);
    }

    private async Task<bool> ValidateDegreeName()
    {
        if (validator.IsValidDegreeName(degree))
            return true;

        await ShowMessageAsync("Invalid degree name.");
        return false;
    }
}